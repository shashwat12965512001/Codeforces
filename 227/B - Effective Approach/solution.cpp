#include <bits/stdc++.h>using namespace std; // ---------------- SPEED ----------------#define fastio()                      \    ios_base::sync_with_stdio(false); \    cin.tie(nullptr);                 \    cout.tie(nullptr); // ---------------- MACROS ----------------#define PI 3.141592653589#define M 1000000007#define pb push_back#define f first#define se second#define foreach(i, j, k, in) for (int i = j; i < k; i += in)#define rforeach(i, j, k, in) for (int i = j; i >= k; i -= in)#define rep(i, n) for (int i = 0; i < (n); i++)#define rrep(i, n) for (int i = (n); i >= 0; i--)#define set_bits(x) __builtin_popcountll(x)#define zero_bits(x) __builtin_ctzll(x)#define all(x) x.begin(), x.end() // ---------------- QUICK INPUT ----------------#define inint(x) \    int x;       \    cin >> x#define inll(x)  \    long long x; \    cin >> x#define instr(x) \    string x;    \    cin >> x // ---------------- COMMON PRINTS ----------------#define YES cout << "YES\n"#define NO cout << "NO\n"#define NEG cout << "-1\n"#define ps(x, y) fixed << setprecision(y) << (x) // ---------------- TYPEDEFS ----------------typedef long long ll;typedef unsigned long long ull;typedef long double lld;typedef pair<int, int> pi;typedef pair<ll, ll> pl;typedef vector<int> vi;typedef vector<ll> vl;typedef vector<pi> vpi;typedef vector<vi> vvi;typedef vector<vl> vvl;typedef map<int, int> mii;typedef set<int> st; // ---------------- DEBUGGING ----------------#ifndef ONLINE_JUDGE#define debug(x)         \    cerr << #x << " = "; \    _print(x);           \    cerr << '\n';#else#define debug(x)#endif void _print(ll t) { cerr << t; }void _print(int t) { cerr << t; }void _print(string t) { cerr << t; }void _print(char t) { cerr << t; }void _print(double t) { cerr << t; } // ---------------- OPERATOR OVERLOADS ----------------template <typename T>istream &operator>>(istream &in, vector<T> &v){    for (auto &it : v)        in >> it;    return in;} template <typename T>ostream &operator<<(ostream &out, const vector<T> &v){    for (auto &it : v)        out << it << " ";    return out;} // ---------------- SORTING HELPERS ----------------bool sorta(const pair<int, int> &a, const pair<int, int> &b) { return (a.se < b.se); }bool sortd(const pair<int, int> &a, const pair<int, int> &b) { return (a.se > b.se); } // ---------------- NUMBER CONVERSIONS ----------------string decToBinary(int n){    string s = "";    while (n > 0)    {        s = char('0' + (n % 2)) + s;        n /= 2;    }    return s.empty() ? "0" : s;} int binaryToDec(const string &s){    int n = 0;    for (char c : s)        n = n * 2 + (c - '0');    return n;} // ---------------- MODULAR ARITHMETIC ----------------ll addmod(ll a, ll b, ll m = M) { return (a % m + b % m) % m; }ll submod(ll a, ll b, ll m = M) { return ((a % m - b % m) + m) % m; }ll mulmod(ll a, ll b, ll m = M) { return ((a % m) * (b % m)) % m; }ll binexp(ll a, ll b, ll m = M){    ll res = 1;    a %= m;    while (b)    {        if (b & 1)            res = (res * a) % m;        a = (a * a) % m;        b >>= 1;    }    return res;} // ---------------- MATH ----------------ll gcd(ll a, ll b) { return b ? gcd(b, a % b) : a; }ll lcm(ll a, ll b) { return (a / gcd(a, b)) * b; } // ---------------- NUMBER THEORY ----------------vector<int> getPrimeFactors(int n){    vector<int> factors;    for (int d = 2; d * d <= n; d++)    {        if (n % d == 0)        {            factors.pb(d);            while (n % d == 0)                n /= d;        }    }    if (n > 1)        factors.pb(n);    return factors;} vector<long long> getFactors(long long n){    vector<long long> factors;    for (long long i = 1; i * i <= n; i++)    {        if (n % i == 0)        {            factors.pb(i);            if (i != n / i)                factors.pb(n / i);        }    }    sort(all(factors));    return factors;} bool isPrime(long long num){    if (num < 2)        return false;    if (num % 2 == 0)        return num == 2;    for (long long i = 3; i * i <= num; i += 2)        if (num % i == 0)            return false;    return true;} bool isPowerOfTwo(long long n) { return (n > 0) && (n & (n - 1)) == 0; } int phi_single(int n){    int res = n;    for (int p = 2; p * p <= n; p++)    {        if (n % p == 0)        {            while (n % p == 0)                n /= p;            res -= res / p;        }    }    if (n > 1)        res -= res / n;    return res;} vector<int> phi_sieve(int N){    vector<int> phi(N + 1);    iota(all(phi), 0);    for (int p = 2; p <= N; p++)    {        if (phi[p] == p)            for (int k = p; k <= N; k += p)                phi[k] -= phi[k] / p;    }    return phi;} // ---------------- BINARY SEARCH HELPERS ----------------int lowerBound(const vector<int> &array, int target){    int low = 0, high = array.size() - 1, res = -1;    while (low <= high)    {        int mid = low + (high - low) / 2;        if (array[mid] == target)        {            res = mid;            high = mid - 1;        }        else if (array[mid] < target)            low = mid + 1;        else            high = mid - 1;    }    return res;} int upperBound(const vector<int> &array, int target){    int low = 0, high = array.size() - 1, res = -1;    while (low <= high)    {        int mid = low + (high - low) / 2;        if (array[mid] == target)        {            res = mid;            low = mid + 1;        }        else if (array[mid] < target)            low = mid + 1;        else            high = mid - 1;    }    return res;} int countOccurences(const vector<int> &array, int target){    int first = lowerBound(array, target);    if (first == -1)        return 0;    int last = upperBound(array, target);    return last - first + 1;} // ---------------- SOLVE ----------------void solve(){    inint(n);    vi a(n);    cin >> a;    inint(m);    vi b(m);    cin >> b;    vi ans(n);    rep(i, n)        ans[a[i] - 1] = i + 1;    ll v = 0, p = 0;    rep(i, m)    {        v += ans[b[i] - 1];        p += (n - ans[b[i] - 1] + 1);    }    cout << v << " " << p << '\n';} // ---------------- MAIN ----------------int main(){    fastio();    // inint(t); while(t--) solve();    solve();    return 0;}